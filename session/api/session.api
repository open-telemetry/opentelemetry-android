public abstract interface class io/opentelemetry/android/session/Session {
	public static final field Companion Lio/opentelemetry/android/session/Session$Companion;
	public abstract fun getId ()Ljava/lang/String;
	public abstract fun getStartTimestamp ()J
}

public final class io/opentelemetry/android/session/Session$Companion {
	public final fun getNONE ()Lio/opentelemetry/android/session/Session$DefaultSession;
}

public final class io/opentelemetry/android/session/Session$DefaultSession : io/opentelemetry/android/session/Session {
	public fun <init> (Ljava/lang/String;J)V
	public final fun copy (Ljava/lang/String;J)Lio/opentelemetry/android/session/Session$DefaultSession;
	public static synthetic fun copy$default (Lio/opentelemetry/android/session/Session$DefaultSession;Ljava/lang/String;JILjava/lang/Object;)Lio/opentelemetry/android/session/Session$DefaultSession;
	public fun equals (Ljava/lang/Object;)Z
	public fun getId ()Ljava/lang/String;
	public fun getStartTimestamp ()J
	public fun hashCode ()I
	public fun toString ()Ljava/lang/String;
}

public abstract interface class io/opentelemetry/android/session/SessionObserver {
	public abstract fun onSessionEnded (Lio/opentelemetry/android/session/Session;)V
	public abstract fun onSessionStarted (Lio/opentelemetry/android/session/Session;Lio/opentelemetry/android/session/Session;)V
}

public abstract interface class io/opentelemetry/android/session/SessionProvider {
	public static final field Companion Lio/opentelemetry/android/session/SessionProvider$Companion;
	public static fun getNoop ()Lio/opentelemetry/android/session/SessionProvider;
	public abstract fun getSessionId ()Ljava/lang/String;
}

public final class io/opentelemetry/android/session/SessionProvider$Companion {
	public final fun getNoop ()Lio/opentelemetry/android/session/SessionProvider;
}

public abstract interface class io/opentelemetry/android/session/SessionPublisher {
	public abstract fun addObserver (Lio/opentelemetry/android/session/SessionObserver;)V
}

