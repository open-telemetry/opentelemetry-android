name: Prepare release branch
on:
  workflow_dispatch:

permissions:
  contents: read

jobs:
  prereqs:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5.0.0

      - name: Verify prerequisites
        run: |
          if [[ $GITHUB_REF_NAME != main ]]; then
            echo this workflow should only be run against main
            exit 1
          fi

          if ! grep --quiet "^## Unreleased$" CHANGELOG.md; then
            echo the change log is missing an \"Unreleased\" section
            exit 1
          fi

  create-pull-request-against-release-branch:
    permissions:
      contents: write  # for Git to git push
    runs-on: ubuntu-latest
    needs:
      - prereqs
    steps:
      - uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5.0.0

      - name: Create release branch
        run: |
          version=$(.github/scripts/get-version.sh)
          version_json=$(.github/scripts/parse-version.sh "$version")
          major=$(echo "$version_json" | jq -r '.major')
          minor=$(echo "$version_json" | jq -r '.minor')
          
          release_branch_name="release/v$major.$minor.x"

          git push origin HEAD:$release_branch_name

          echo "VERSION=$version" >> $GITHUB_ENV
          echo "RELEASE_BRANCH_NAME=$release_branch_name" >> $GITHUB_ENV

      - name: Update version
        run: .github/scripts/update-version.sh $VERSION

      - name: Update version in README
        run: sed -Ei "s/(\"io.opentelemetry.android:android-agent:).*\"/\1${VERSION}-alpha\"/" README.md
      - name: Update instrumentation README.md versions
        run: |
          for f in $(find instrumentation -name README.md) ; do 
            echo Updating version in $f; 
            sed -Ei "s/(\(\"io\.opentelemetry\.android.*):[[:digit:]]+\.[[:digit:]]+\.[[:digit:]](-alpha)?\"/\1:${VERSION}-alpha\"/" $f
          done
      - name: Update the change log with the approximate release date
        run: |
          date=$(date "+%Y-%m-%d")
          sed -Ei "s/^## Unreleased$/## Version $VERSION ($date)/" CHANGELOG.md

      - name: Use CLA approved github bot
        run: .github/scripts/use-cla-approved-github-bot.sh

      - uses: actions/create-github-app-token@67018539274d69449ef7c02e8e71183d1719ab42 # v2.1.4
        id: otelbot-token
        with:
          app-id: ${{ vars.OTELBOT_APP_ID }}
          private-key: ${{ secrets.OTELBOT_PRIVATE_KEY }}

      - name: Create pull request against the release branch
        env:
          # not using secrets.GITHUB_TOKEN since pull requests from that token do not run workflows
          GH_TOKEN: ${{ steps.otelbot-token.outputs.token }}
        run: |
          message="Prepare release $VERSION"
          branch="otelbot/prepare-release-${VERSION}"

          git checkout -b $branch
          git commit -a -m "$message"
          git push --set-upstream origin $branch
          gh pr create --title "[$RELEASE_BRANCH_NAME] $message" \
                       --body "$message." \
                       --base $RELEASE_BRANCH_NAME

  create-pull-request-against-main:
    permissions:
      contents: write  # for Git to git push
    runs-on: ubuntu-latest
    needs:
      - prereqs
    steps:
      - uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5.0.0

      - name: Set environment variables
        run: |
          version=$(.github/scripts/get-version.sh)
          version_json=$(.github/scripts/parse-version.sh "$version")
          major=$(echo "$version_json" | jq -r '.major')
          minor=$(echo "$version_json" | jq -r '.minor')
          patch=$(echo "$version_json" | jq -r '.patch')
          rc=$(echo "$version_json" | jq -r '.rc')
          
          if [[ -n $version_rc ]]; then
            next_version="$major.$minor.$patch-rc.$((rc + 1))"
          else
            if [[ $patch == 0 ]]; then
              next_version="$major.$((minor + 1)).0"
            else
              echo "unexpected version: $version"
              exit 1
            fi
          fi
          
          echo "NEXT_VERSION=${next_version}" >> $GITHUB_ENV
          echo "VERSION=$version" >> $GITHUB_ENV

      - name: Update version
        run: .github/scripts/update-version.sh $NEXT_VERSION

      - name: Update version in README
        run: sed -Ei "s/(\"io.opentelemetry.android:opentelemetry-android-bom:).*\"/\1${VERSION}-alpha\"/" README.md

      - name: Update instrumentation README.md versions
        run: |
          for f in $(find instrumentation -name README.md) ; do 
            echo Updating version in $f; 
            sed -Ei "s/(\(\"io\.opentelemetry\.android.*):[[:digit:]]+\.[[:digit:]]+\.[[:digit:]](-alpha)?\"/\1:${VERSION}-alpha\"/" $f
          done

      - name: Update the change log on main
        run: |
          # the actual release date on main will be updated at the end of the release workflow
          date=$(date "+%Y-%m-%d")
          sed -Ei "s/^## Unreleased$/## Unreleased\n\n## Version $VERSION ($date)/" CHANGELOG.md

      - name: Use CLA approved github bot
        run: .github/scripts/use-cla-approved-github-bot.sh

      - uses: actions/create-github-app-token@67018539274d69449ef7c02e8e71183d1719ab42 # v2.1.4
        id: otelbot-token
        with:
          app-id: ${{ vars.OTELBOT_APP_ID }}
          private-key: ${{ secrets.OTELBOT_PRIVATE_KEY }}

      - name: Create pull request against main
        env:
          # not using secrets.GITHUB_TOKEN since pull requests from that token do not run workflows
          GH_TOKEN: ${{ steps.otelbot-token.outputs.token }}
        run: |
          message="Update version to $NEXT_VERSION"
          body="Update version to \`$NEXT_VERSION\`."
          branch="otelbot/update-version-to-${NEXT_VERSION}"

          git checkout -b $branch
          git commit -a -m "$message"
          git push --set-upstream origin $branch
          gh pr create --title "$message" \
                       --body "$body" \
                       --base main
