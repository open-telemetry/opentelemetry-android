[versions]
opentelemetry-instrumentation-alpha = "2.20.1-alpha"
#opentelemetry-instrumentation = "2.9.0" // alpha bom includes non-alpha bom
opentelemetry-semconv = "1.37.0"
opentelemetry-semconv-alpha = "1.37.0-alpha"
opentelemetry-contrib = "1.50.0-alpha"
mockito = "5.20.0"
junit = "6.0.0"
byteBuddy = "1.17.8"
okhttp = "5.2.0"
spotless = "8.0.0"
kotlin = "2.2.20"
androidPlugin = "8.13.0"
kspPlugin = "2.2.20-2.0.4"
junitKtx = "1.3.0"
autoServiceProcessor = "1.2.0"
autoService = "1.1.1"
androidx-navigation = "2.7.7"
compose = "1.5.4"
detekt = "1.23.8"
binaryCompatValidator = "0.18.1"
fragment = "1.8.9"
koverGradlePlugin = "0.9.2"

[libraries]
opentelemetry-platform-alpha = { module = "io.opentelemetry.instrumentation:opentelemetry-instrumentation-bom-alpha", version.ref = "opentelemetry-instrumentation-alpha" }
opentelemetry-platform = { module = "io.opentelemetry.instrumentation:opentelemetry-instrumentation-bom" }
opentelemetry-core-bom = { module = "io.opentelemetry:opentelemetry-bom" }
androidx-navigation-fragment = { group = "androidx.navigation", name = "navigation-fragment", version.ref = "androidx-navigation" }
androidx-navigation-runtime-ktx = { group = "androidx.navigation", name = "navigation-runtime-ktx", version.ref = "androidx-navigation" }
androidx-core = "androidx.core:core:1.17.0"
androidx-annotation = "androidx.annotation:annotation:1.9.1"
androidx-lifecycle-process = "androidx.lifecycle:lifecycle-process:2.9.4"
androidx-preference-ktx = "androidx.preference:preference-ktx:1.2.1"
androidx-fragment = { module = "androidx.fragment:fragment", version.ref="fragment" }

findbugs-jsr305 = "com.google.code.findbugs:jsr305:3.0.2"
byteBuddy = { module = "net.bytebuddy:byte-buddy", version.ref = "byteBuddy" }
okhttp = { module = "com.squareup.okhttp3:okhttp", version.ref = "okhttp" }
opentelemetry-instrumentation-api = { module = "io.opentelemetry.instrumentation:opentelemetry-instrumentation-api" }
opentelemetry-instrumentation-apiSemconv = { module = "io.opentelemetry.instrumentation:opentelemetry-instrumentation-api-incubator", version.ref = "opentelemetry-instrumentation-alpha" }
opentelemetry-instrumentation-okhttp = { module = "io.opentelemetry.instrumentation:opentelemetry-okhttp-3.0", version.ref = "opentelemetry-instrumentation-alpha" }
opentelemetry-semconv = { module = "io.opentelemetry.semconv:opentelemetry-semconv", version.ref = "opentelemetry-semconv" }
opentelemetry-semconv-incubating = { module = "io.opentelemetry.semconv:opentelemetry-semconv-incubating", version.ref = "opentelemetry-semconv-alpha" }
opentelemetry-api = { module = "io.opentelemetry:opentelemetry-api" }
opentelemetry-api-incubator = { module = "io.opentelemetry:opentelemetry-api-incubator" }
opentelemetry-sdk-extension-incubator = { module = "io.opentelemetry:opentelemetry-sdk-extension-incubator" }
opentelemetry-sdk = { module = "io.opentelemetry:opentelemetry-sdk" }
opentelemetry-context = { module = "io.opentelemetry:opentelemetry-context" }
opentelemetry-exporter-logging = { module = "io.opentelemetry:opentelemetry-exporter-logging" }
opentelemetry-diskBuffering = { module = "io.opentelemetry.contrib:opentelemetry-disk-buffering", version.ref = "opentelemetry-contrib" }
opentelemetry-processors = { module = "io.opentelemetry.contrib:opentelemetry-processors", version.ref = "opentelemetry-contrib" }
opentelemetry-exporter-otlp = { module = "io.opentelemetry:opentelemetry-exporter-otlp" }
auto-service-annotations = { module = "com.google.auto.service:auto-service-annotations", version.ref = "autoService" }
auto-service-processor = { module = "dev.zacsweers.autoservice:auto-service-ksp", version.ref = "autoServiceProcessor" }
compose = { group = "androidx.compose.ui", name = "ui", version.ref = "compose" }
detekt-plugin = { module = "io.gitlab.arturbosch.detekt:detekt-gradle-plugin", version.ref = "detekt" }
binary-compat-validator = { module = "org.jetbrains.kotlinx:binary-compatibility-validator", version.ref = "binaryCompatValidator" }

#Test tools
opentelemetry-sdk-testing = { module = "io.opentelemetry:opentelemetry-sdk-testing" }
androidx-test-core = "androidx.test:core:1.7.0"
androidx-test-rules = "androidx.test:rules:1.7.0"
androidx-test-runner = "androidx.test:runner:1.7.0"
androidx-junit = "androidx.test.ext:junit:1.3.0"
mockito-core = { module = "org.mockito:mockito-core", version.ref = "mockito" }
mockito-junit-jupiter = { module = "org.mockito:mockito-junit-jupiter", version.ref = "mockito" }
mockk = "io.mockk:mockk:1.14.6"
junit-jupiter-api = { module = "org.junit.jupiter:junit-jupiter-api", version.ref = "junit" }
junit-jupiter-engine = { module = "org.junit.jupiter:junit-jupiter-engine", version.ref = "junit" }
junit-vintage-engine = { module = "org.junit.vintage:junit-vintage-engine", version.ref = "junit" }
junit-platform-launcher = { module = "org.junit.platform:junit-platform-launcher", version = "6.0.0" }
robolectric = "org.robolectric:robolectric:4.16"
assertj-core = "org.assertj:assertj-core:3.27.6"
awaitility = "org.awaitility:awaitility:4.3.0"
mockwebserver = "com.google.mockwebserver:mockwebserver:20130706"
okhttp-mockwebserver = { module = "com.squareup.okhttp3:mockwebserver", version.ref = "okhttp" }

#Compilation tools
desugarJdkLibs = "com.android.tools:desugar_jdk_libs:2.1.5"
nullaway = "com.uber.nullaway:nullaway:0.12.10"
errorprone-core = "com.google.errorprone:error_prone_core:2.42.0"
errorprone-javac = "com.google.errorprone:javac:9+181-r4173-1"
spotless-plugin = { module = "com.diffplug.spotless:spotless-plugin-gradle", version.ref = "spotless" }
errorprone-plugin = "net.ltgt.gradle:gradle-errorprone-plugin:4.3.0"
nullaway-plugin = "net.ltgt.gradle:gradle-nullaway-plugin:2.3.0"
animalsniffer-plugin = "ru.vyarus:gradle-animalsniffer-plugin:2.0.1"
android-plugin = { module = "com.android.tools.build:gradle", version.ref = "androidPlugin" }
byteBuddy-plugin = { module = "net.bytebuddy:byte-buddy-gradle-plugin", version.ref = "byteBuddy" }
kotlin-plugin = { module = "org.jetbrains.kotlin:kotlin-gradle-plugin", version.ref = "kotlin" }
ksp-plugin = { module = "com.google.devtools.ksp:symbol-processing-gradle-plugin", version.ref = "kspPlugin" }
androidx-junit-ktx = { group = "androidx.test.ext", name = "junit-ktx", version.ref = "junitKtx" }
kover-plugin = { module = "org.jetbrains.kotlinx.kover:org.jetbrains.kotlinx.kover.gradle.plugin", version.ref = "koverGradlePlugin" }

[bundles]
mocking = ["mockito-core", "mockito-junit-jupiter", "mockk"]
junit = ["junit-jupiter-api", "junit-jupiter-engine", "junit-vintage-engine"]

[plugins]
publishPlugin = { id = "io.github.gradle-nexus.publish-plugin", version = "2.0.0" }
spotless = { id = "com.diffplug.spotless", version.ref = "spotless" }
kotlinAndroid = { id = "org.jetbrains.kotlin.android", version.ref = "kotlin" }
androidApp = { id = "com.android.application", version.ref = "androidPlugin" }
kover = { id = "org.jetbrains.kotlinx.kover", version.ref = "koverGradlePlugin" }
